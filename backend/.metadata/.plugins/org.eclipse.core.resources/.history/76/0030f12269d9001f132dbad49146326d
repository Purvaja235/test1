package com.example.demo.controller;

import com.example.demo.model.FieldSequence;
import com.example.demo.repository.FieldSequenceRepository;

import jakarta.persistence.EntityManager;
import jakarta.persistence.Query;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.List;
import java.util.Optional;

@Controller

@RequestMapping("/field-sequence")
public class FieldSequenceController {
    
	@Autowired
    private FieldSequenceRepository fieldSequenceRepository;
	 @Autowired
	    private EntityManager entityManager;

    @GetMapping
    public String index(Model model) {

        List<FieldSequence> fieldSequences = fieldSequenceRepository.findAllByOrderBySequenceDesc();
        System.out.println("Fetched Field Sequences: " + fieldSequences);
        model.addAttribute("fieldSequences", fieldSequences);
        return "field-sequence/index";  // Returns the view
    }

    @GetMapping("/create")
    public String create(Model model) {
        model.addAttribute("fieldSequence", new FieldSequence());
        return "field-sequence/create";
    }

    @PostMapping("/create")
    public String create(@ModelAttribute FieldSequence fieldSequence, RedirectAttributes redirectAttributes) {
        fieldSequenceRepository.save(fieldSequence);
        redirectAttributes.addFlashAttribute("message", "Field sequence created successfully!");
        return "redirect:/field-sequence";
    }

    @GetMapping("/edit/{id}")
    public String edit(@PathVariable("id") Integer id, Model model) {
        Optional<FieldSequence> fieldSequenceOpt = fieldSequenceRepository.findById(id);
        if (fieldSequenceOpt.isEmpty()) {
            return "error/404"; // Show error page if not found
        }
        model.addAttribute("fieldSequence", fieldSequenceOpt.get());
        return "field-sequence/edit";
    }

    @PostMapping("/edit/{id}")
    public String edit(@PathVariable("id") Integer id, @ModelAttribute FieldSequence fieldSequence, RedirectAttributes redirectAttributes) {
        fieldSequence.setFieldSequenceId(id);  // Ensure the ID is set correctly
        fieldSequenceRepository.save(fieldSequence);  // Save updated field sequence
        redirectAttributes.addFlashAttribute("message", "Field sequence updated successfully!");
        return "redirect:/field-sequence";  // Redirect back to the index page
    }

    @GetMapping("/delete/{id}")
    public String delete(@PathVariable("id") Integer id, Model model) {
        Optional<FieldSequence> fieldSequenceOpt = fieldSequenceRepository.findById(id);
        if (fieldSequenceOpt.isEmpty()) {
            return "error/404"; // Give error page if not found
        }
        model.addAttribute("fieldSequence", fieldSequenceOpt.get());
        model.addAttribute("dataType", fieldSequenceOpt.get().getDataType());

        return "field-sequence/delete";
    }

    @PostMapping("/delete/{id}")
    public String deleteConfirmed(@PathVariable("id") Integer id, RedirectAttributes redirectAttributes) {
        fieldSequenceRepository.deleteById(id);
        redirectAttributes.addFlashAttribute("message", "Field sequence deleted successfully!");
        return "redirect:/field-sequence";
    }
    
    // Method to fetch dynamic table names
    @GetMapping("/getTableNames")
    public String getTableNames(Model model) {
        String query = "SELECT table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE'";
        Query nativeQuery = entityManager.createNativeQuery(query);
        List<String> tableNames = nativeQuery.getResultList();

        model.addAttribute("tableNames", tableNames);
        return "field-sequence/index";  // Returns the view
    }

    // Utility method for session validation
    private boolean sessionNotValid() {
        // Placeholder for actual session validation logic
        return false; 
    }
}
